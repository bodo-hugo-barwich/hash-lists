# This is a basic workflow to help you get started with Actions

name: Automated Tests

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  pull_request:
    branches: 
     - master
  workflow_dispatch:
     branches:    
      - master  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "testing"
  testing:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Check for the FreePascal Compiler
      - name: Check for the FreePascal Compiler
        run: sudo apt-get update && apt-cache search fpc

      # Install the FreePascal Compiler
      - name: Install the FreePascal Compiler
        run: sudo apt-get install fpc fp-utils
        
      # Clone epiktimer Project
      - name: Clone epiktimer Project
        run: |
          pwd ; ls -lah 
          git clone https://github.com/graemeg/epiktimer.git ../epiktimer
          ls -lahd ../epiktimer
          ls -lah ../epiktimer
        
      # Clone fptest Project
      - name: Clone fptest Project
        run: |
          pwd ; ls -lah 
          git clone https://github.com/graemeg/fptest.git ../fptest
          ls -lahd ../fptest
          ls -lah ../fptest

      # Create Compiling Directories
      - name: Create Compiling Directories
        run: |
          mkdir -p ./lib/x86_64-linux/ 
          mkdir -p ./tests/lib/x86_64-linux/
        
      # Compile the Demo Application and the Test Application
      - name: Compile the Demo Application and the Test Application
        run: |
          /usr/bin/fpc  -MObjFPC -Scaghi -Cg -CirotR -gw2 -godwarfsets -gl -gh -Xg -gt -l -vewnhibq -Fi./lib/x86_64-linux -Fu./src -Fu./ -FU./lib/x86_64-linux/ -FE./ -o./demo_hash-lists.dbg.run demohashlists.pas    
          /usr/bin/fpc  -MObjFPC -Scaghi -Cg -CirotR -gw2 -godwarfsets -gl -gh -Xg -gt -l -vewnhibq -Fi./tests/lib/x86_64-linux -Fl./src -Fu./src  -Fu./tests/ -Fu./tests/src -Fu../epiktimer -Fu../fptest/src -Fu/usr/lib/lazarus/2.0.0/packager/units/x86_64-linux -FU./tests/lib/x86_64-linux/ -FE./tests/ -o./tests/tests_hash-lists.dbg.run ./tests/testshashlists.lpr
        
      # Try the Demo Application and run the Test Application
      - name: Try the Demo Application and run the Test Application
        run: |
          #Execute the Demo Application
          echo "Demo Application: Executing ..."
          export HEAPTRC="log=demo_heap.log"; ./demo_hash-lists.dbg.run 2>./demo_error.log 1>./demo_exec.log ; error_code=$?
          echo "Demo Application: Execution finished with [$error_code]"
          #Demo Application Execution Report
          echo "Demo Execution Log:" ; cat ./demo_exec.log
          echo "Demo Execution Error:" ; cat ./demo_error.log
          echo "Demo Execution Heap:" ; cat ./demo_heap.log
          error=`cat ./demo_error.log` ; if [ -n "$error" ]; then echo "Demo failed with Error [Code: '$error_code']" && exit 1; fi ;
          leak=`cat ./demo_heap.log | grep -i "unfreed memory blocks" | awk '{print $1}'` ; if [ $leak -ne 0 ]; then echo "Memory Leaks: $leak" && exit 1; else echo "Memory Leaks: NONE"; fi ;
          #Execute the Application Tests
          echo "Application Tests: Executing ..."
          export HEAPTRC="log=test_heap.log"; ./tests/tests_hash-lists.dbg.run 2>./tests_error.log 1>./tests_exec.log ; error_code=$?
          echo "Application Tests: Tests finished with [$error_code]"
          #Application Tests Execution Report
          echo "Tests Execution Log:" ; cat ./tests_exec.log
          echo "Tests Execution Error:" ; cat ./tests_error.log
          echo "Tests Execution Heap:" ; cat ./test_heap.log
          error=`cat ./tests_error.log` ; if [ -n "$error" ]; then echo "Tests failed with Error [Code: '$error_code']" && exit 1; fi ;
          leak=`cat ./test_heap.log | grep -i "unfreed memory blocks" | awk '{print $1}'` ; if [ $leak -gt 1 ]; then echo "Memory Leaks: $leak" && exit 1; else echo "Memory Leaks: NONE"; fi ;
